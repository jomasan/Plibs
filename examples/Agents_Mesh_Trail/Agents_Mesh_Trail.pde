/**
 * Simple call for agent population with a flocking behavior based on Craig Reynolds
 * more info at www.plethora-project.com
 * requires toxiclibs and peasycam
 */

/* 
 * Copyright (c) 2013 Jose Sanchez
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 * 
 * http://creativecommons.org/licenses/LGPL/2.1/
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 * 
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

import processing.opengl.*;
import plethora.core.*;
import toxi.geom.*;
import peasy.*;

ArrayList <Ple_Agent> boids;

//using peasycam
PeasyCam cam;
Ple_MeshPipe meshPipe;

float DIMX = 600;
float DIMY = 600;
float DIMZ = 600;

int pop = 50;

void setup() {
  size(1200, 600, OPENGL);
  smooth();
  cam = new PeasyCam(this, 100);
  meshPipe = new Ple_MeshPipe(this);

  //initialize the arrayList
  boids = new ArrayList <Ple_Agent>();

  for (int i = 0; i < pop; i++) {

    //set the initial location as 0,0,0
    Vec3D v = new Vec3D ();
    //create the plethora agents!
    Ple_Agent pa = new Ple_Agent(this, v);

    //generate a random initial velocity
    Vec3D initialVelocity = new Vec3D (random(-1, 1), random(-1, 1), random(-1, 1));

    //set some initial values:
    //initial velocity
    pa.setVelocity(initialVelocity);

    //add the agents to the list
    boids.add(pa);
  }
}

void draw() {
  background(235);
  buildBox(DIMX, DIMY, DIMZ);
  
  //reset mesh everyframe to create it dynamically
  // you can avoid this if you are not altering the mesh points to increase performance
  meshPipe.resetMesh();
  
  lights();

  for (Ple_Agent pa : boids) {

    //call flock, cohesion, alignment, separation.
    //first define the population, then the distances for cohesion,alignment, 
    //separation and then the scales in same order. Try playing with the scales and distances!
    pa.flock(boids, 80, 40, 30, 1, 0.5, 1.5);

    //define the boundries of the space:
    pa.wrapSpace(DIMX/2, DIMY/2, DIMY/2);

    //set the max speed of movement:
    pa.setMaxspeed(3);
    //pa.setMaxforce(0.05);

    //update agents location based on past calculations
    pa.update();

    //--------------
    //drop a point is space as a record of past positions
    //limit the number of points to drop in order to get a good result,
    //also, allow for some distance between points as corners could be messy.
    pa.dropTrail(5, 50);

    //Display the location of the agent with a point
    strokeWeight(2);
    stroke(0);
    pa.displayPoint();
    //--------------

    //Create Mesh from Trail points! if there is more than 2 points in the list...
    if (pa.trail.size() > 1) {
      meshPipe.createListPipe(pa.trail, 9, 5);
    }

    //Display the direction of the agent with a line
    strokeWeight(1);
    stroke(255, 0, 0, 90);
    pa.displayDir(pa.vel.magnitude()*3);
  }

  //draw the mesh generated by all the agents!!!
  stroke(0);
  fill(255);
  meshPipe.drawMesh(meshPipe.mesh, true);
}

void buildBox(float x, float y, float z) {
  noFill();
  stroke(0, 90);
  strokeWeight(1);
  box(x);
}

